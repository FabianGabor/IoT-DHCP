# dhcpd.conf
#
# Attention: If /etc/ltsp/dhcpd.conf exists, that will be used as
# configuration file instead of this file.
#
# Database:
# /var/lib/dhcpd/dhcpd.leases

failover peer "failover-dhcp" {
  primary;
  address 10.0.1.10;
  peer address 10.0.2.10; # was not provided
  max-response-delay 60;
  max-unacked-updates 10;
  mclt 3600;
  split 255; # use primary until failure
  load balance max seconds 3; # fck that warning
}

# option definitions common to all supported networks...
#option domain-name "example.org";
#option domain-name-servers ns1.example.org, ns2.example.org;

default-lease-time 600;
max-lease-time 7200;

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

subnet 10.16.100.0 netmask 255.255.255.240 {
  # range 10.16.100.5 10.16.100.9; # defined in pool
  option domain-name-servers 192.168.10.10, 192.168.10.100;
  option subnet-mask 255.255.255.240;
  option routers 192.168.10.14;
  option ntp-servers 192.168.10.10;
  option broadcast-address 10.16.100.15;

  next-server 192.168.10.100;
  allow booting;
  allow bootp;  

  default-lease-time 600;
  max-lease-time 7200;

  pool {
    range 10.16.100.5 10.16.100.9;
    failover peer "failover-dhcp";
  }

}

host host-fixed-ip {
  hardware ethernet 00:14:38:50:E8:DF;
  fixed-address 10.16.100.2;
}

class "PXE" {
  match if substring(option vendor-class-identifier, 0, 9) = "PXEClient";
  option vendor-class-identifier "PXEClient";
  vendor-option-space PXE;
  next-server 192.168.10.100;
  filename = "pxelinux.0";
}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
